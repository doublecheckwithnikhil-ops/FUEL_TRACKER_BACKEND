generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  empCode  String? @unique
  password String
  roleId   Int
  role     Role    @relation(fields: [roleId], references: [id])
  vehicles Vehicle[]
  petroCards PetroCard[] @relation("UserPetroCards")
  fuelEntries FuelEntry[]
}

model Vehicle {
  id              Int     @id @default(autoincrement())
  vehicleNumber   String @unique
  capacity        Int
  assignedDriverId Int?
  driver          User?   @relation(fields: [assignedDriverId], references: [id])
  fuelEntries     FuelEntry[]
}

model FuelEntry {
  id              Int      @id @default(autoincrement())
  vehicleId       Int
  location        String
  latitude        Float
  longitude       Float
  odometerReading Float
  billNumber      String
  quantity        Float
  ratePerLitre    Float
  driverId        Int
  amount          Float
  meterImg        String
  cardId          Int?
  billImg         String
  createdAt       DateTime? @default(now())

  vehicle  Vehicle @relation(fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  driver   User    @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  petroCard PetroCard? @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PetroCard {
  id               Int       @id @default(autoincrement())
  cardNumber       String @unique
  validTill        String
  issuedToDriverId Int?
  issuedToDriver   User?     @relation("UserPetroCards", fields: [issuedToDriverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fuelEntries      FuelEntry[]
}